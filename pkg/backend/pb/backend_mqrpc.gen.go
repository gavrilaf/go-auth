// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: backend.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		backend.proto

	It has these top-level messages:
		Empty
		ResID
		BirthDate
		ServerStatus
		Device
		CreateUserReq
		LoginReq
		UserDevice
		UserDeviceID
		ConfirmDeviceReq
		UserPersonalInfo
		UserCountry
*/
package pb

import fmt "fmt"
import errors "errors"
import rpc "github.com/gavrilaf/amqp/rpc"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Server API
type SpawnServer interface {
	Ping(arg *Empty) (*ServerStatus, error)
	CreateUser(arg *CreateUserReq) (*ResID, error)
	AddDevice(arg *UserDevice) (*Empty, error)
	HandleLogin(arg *LoginReq) (*Empty, error)
	ConfirmDevice(arg *ConfirmDeviceReq) (*Empty, error)
	DeleteDevice(arg *UserDeviceID) (*Empty, error)
	UpdateUserCountry(arg *UserCountry) (*Empty, error)
	UpdateUserPersonalInfo(arg *UserPersonalInfo) (*Empty, error)
}

// Run server API with this call
func RunServer(srv rpc.Server, handler SpawnServer) {
	srv.Serve(func(funcID int32, arg []byte) ([]byte, error) {
		switch funcID {
		case Functions_Ping:
			return _Handle_Ping(handler, arg)
		case Functions_CreateUser:
			return _Handle_CreateUser(handler, arg)
		case Functions_AddDevice:
			return _Handle_AddDevice(handler, arg)
		case Functions_HandleLogin:
			return _Handle_HandleLogin(handler, arg)
		case Functions_ConfirmDevice:
			return _Handle_ConfirmDevice(handler, arg)
		case Functions_DeleteDevice:
			return _Handle_DeleteDevice(handler, arg)
		case Functions_UpdateUserCountry:
			return _Handle_UpdateUserCountry(handler, arg)
		case Functions_UpdateUserPersonalInfo:
			return _Handle_UpdateUserPersonalInfo(handler, arg)
		default:
			return nil, errors.New(fmt.Sprintf("unknown function with code: %d", funcID))
		}
	})
}

// Client API
type SpawnClient interface {
	Close()
	Ping(arg *Empty) (*ServerStatus, error)
	CreateUser(arg *CreateUserReq) (*ResID, error)
	AddDevice(arg *UserDevice) (*Empty, error)
	HandleLogin(arg *LoginReq) (*Empty, error)
	ConfirmDevice(arg *ConfirmDeviceReq) (*Empty, error)
	DeleteDevice(arg *UserDeviceID) (*Empty, error)
	UpdateUserCountry(arg *UserCountry) (*Empty, error)
	UpdateUserPersonalInfo(arg *UserPersonalInfo) (*Empty, error)
}

func NewSpawnClient(cc rpc.Client) SpawnClient {
	return &spawnClient{cc}
}

type spawnClient struct {
	cc rpc.Client
}

// Functions enum
const (
	Functions_Ping                   int32 = 0
	Functions_CreateUser             int32 = 1
	Functions_AddDevice              int32 = 2
	Functions_HandleLogin            int32 = 3
	Functions_ConfirmDevice          int32 = 4
	Functions_DeleteDevice           int32 = 5
	Functions_UpdateUserCountry      int32 = 6
	Functions_UpdateUserPersonalInfo int32 = 7
)

// Server API handlers
func _Handle_Ping(handler interface{}, arg []byte) ([]byte, error) {
	var req Empty
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).Ping(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_CreateUser(handler interface{}, arg []byte) ([]byte, error) {
	var req CreateUserReq
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).CreateUser(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_AddDevice(handler interface{}, arg []byte) ([]byte, error) {
	var req UserDevice
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).AddDevice(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_HandleLogin(handler interface{}, arg []byte) ([]byte, error) {
	var req LoginReq
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).HandleLogin(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_ConfirmDevice(handler interface{}, arg []byte) ([]byte, error) {
	var req ConfirmDeviceReq
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).ConfirmDevice(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_DeleteDevice(handler interface{}, arg []byte) ([]byte, error) {
	var req UserDeviceID
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).DeleteDevice(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_UpdateUserCountry(handler interface{}, arg []byte) ([]byte, error) {
	var req UserCountry
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).UpdateUserCountry(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}
func _Handle_UpdateUserPersonalInfo(handler interface{}, arg []byte) ([]byte, error) {
	var req UserPersonalInfo
	err := req.Unmarshal(arg)
	if err != nil {
		return nil, err
	}
	resp, err := handler.(SpawnServer).UpdateUserPersonalInfo(&req)
	if err != nil {
		return nil, err
	}
	return resp.Marshal()
}

// Client API handlers
func (this *spawnClient) Close() {
	this.cc.Close()
}
func (this *spawnClient) Ping(arg *Empty) (*ServerStatus, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_Ping, Body: request})
	if err != nil {
		return nil, err
	}
	var resp ServerStatus
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) CreateUser(arg *CreateUserReq) (*ResID, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_CreateUser, Body: request})
	if err != nil {
		return nil, err
	}
	var resp ResID
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) AddDevice(arg *UserDevice) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_AddDevice, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) HandleLogin(arg *LoginReq) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_HandleLogin, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) ConfirmDevice(arg *ConfirmDeviceReq) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_ConfirmDevice, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) DeleteDevice(arg *UserDeviceID) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_DeleteDevice, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) UpdateUserCountry(arg *UserCountry) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_UpdateUserCountry, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
func (this *spawnClient) UpdateUserPersonalInfo(arg *UserPersonalInfo) (*Empty, error) {
	request, err := arg.Marshal()
	if err != nil {
		return nil, err
	}
	respData, err := this.cc.RemoteCall(rpc.Request{FuncID: Functions_UpdateUserPersonalInfo, Body: request})
	if err != nil {
		return nil, err
	}
	var resp Empty
	err = resp.Unmarshal(respData)
	return &resp, err
}
